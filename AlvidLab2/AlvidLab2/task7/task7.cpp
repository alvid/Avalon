// task7.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
//Задание7. Пул потоков
//Разработаем простой пул потоков, который позволяет :
//•	создавать разумное количество потоков
//•	и многократно их использовать, пока существует пул
//•	при уничтожении самого пула потоки также удаляются.
//Ограничения(упрощения) нашей реализации :
//•	все задания выполняют одну и ту же работу над разными наборами данных
//•	количество «работ» / заданий известно заранее(и превышает количество аппаратных потоков)
//•	как задавать время жизни пула ?
//•	Чтобы можно было хоть как - то попробовать измерить время работы, задания будем добавлять в пул все сразу и централизовано в функции main(в жизни обычно задания формируются разными клиентами в произвольном месте, в любое время и в произвольном порядке)
//•	При выполнении задания хотелось бы исключить вывод на консоль / файл, так как вывод должен выполняться исключительно последовательно(= > придется защищать вывод мьютексом) и он(вывод) будет занимать «львиную долю» времени = > эксперимент не будет «чистым» = > в качестве задания можно использовать создание вектора заданного размера, формирование значений элементов(rand())и какие - то действия, например, вычисление суммы
//•	Интересно было бы «посчитать» сколько заданий выполнил каждый поток

#include <iostream>

#include "ThreadPool.hpp"
#include "..\..\..\Common\Timeter.hpp"

class Stupid_task : public Task {
public:
	void do_work() override {
	}
};

int main()
{
	enum {
		THREAD_COUNT = 0,
		TASK_COUNT = 100,
	};
	
	Timeter2 tm;

	Thread_pool tp(THREAD_COUNT);
	for (size_t i = 0; i < TASK_COUNT; ++i)
		tp.add_task(std::unique_ptr<Stupid_task>(new Stupid_task()));

	auto [ss1, ms1, us1] = split_duration(tm.reset());

	for (size_t i = 0; i < TASK_COUNT; ++i) {
		Stupid_task st();
		st();
	}

	auto [ss2, ms2, us2] = split_duration(tm.reset());
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
